// This file was generated by counterfeiter
package fake_service_adapter

import (
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker-sdk/bosh"
	"github.com/pivotal-cf/on-demand-service-broker-sdk/serviceadapter"
)

type FakeServiceAdapter struct {
	GenerateManifestStub        func(serviceDeployment serviceadapter.ServiceDeployment, plan serviceadapter.Plan, requestParams serviceadapter.RequestParameters, previousManifest *bosh.BoshManifest, previousPlan *serviceadapter.Plan) (bosh.BoshManifest, error)
	generateManifestMutex       sync.RWMutex
	generateManifestArgsForCall []struct {
		serviceDeployment serviceadapter.ServiceDeployment
		plan              serviceadapter.Plan
		requestParams     serviceadapter.RequestParameters
		previousManifest  *bosh.BoshManifest
		previousPlan      *serviceadapter.Plan
	}
	generateManifestReturns struct {
		result1 bosh.BoshManifest
		result2 error
	}
	CreateBindingStub        func(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, arbitraryParams map[string]interface{}) (map[string]interface{}, error)
	createBindingMutex       sync.RWMutex
	createBindingArgsForCall []struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
		arbitraryParams    map[string]interface{}
	}
	createBindingReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	DeleteBindingStub        func(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest) error
	deleteBindingMutex       sync.RWMutex
	deleteBindingArgsForCall []struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
	}
	deleteBindingReturns struct {
		result1 error
	}
}

func (fake *FakeServiceAdapter) GenerateManifest(serviceDeployment serviceadapter.ServiceDeployment, plan serviceadapter.Plan, requestParams serviceadapter.RequestParameters, previousManifest *bosh.BoshManifest, previousPlan *serviceadapter.Plan) (bosh.BoshManifest, error) {
	fake.generateManifestMutex.Lock()
	fake.generateManifestArgsForCall = append(fake.generateManifestArgsForCall, struct {
		serviceDeployment serviceadapter.ServiceDeployment
		plan              serviceadapter.Plan
		requestParams     serviceadapter.RequestParameters
		previousManifest  *bosh.BoshManifest
		previousPlan      *serviceadapter.Plan
	}{serviceDeployment, plan, requestParams, previousManifest, previousPlan})
	fake.generateManifestMutex.Unlock()
	if fake.GenerateManifestStub != nil {
		return fake.GenerateManifestStub(serviceDeployment, plan, requestParams, previousManifest, previousPlan)
	} else {
		return fake.generateManifestReturns.result1, fake.generateManifestReturns.result2
	}
}

func (fake *FakeServiceAdapter) GenerateManifestCallCount() int {
	fake.generateManifestMutex.RLock()
	defer fake.generateManifestMutex.RUnlock()
	return len(fake.generateManifestArgsForCall)
}

func (fake *FakeServiceAdapter) GenerateManifestArgsForCall(i int) (serviceadapter.ServiceDeployment, serviceadapter.Plan, serviceadapter.RequestParameters, *bosh.BoshManifest, *serviceadapter.Plan) {
	fake.generateManifestMutex.RLock()
	defer fake.generateManifestMutex.RUnlock()
	return fake.generateManifestArgsForCall[i].serviceDeployment, fake.generateManifestArgsForCall[i].plan, fake.generateManifestArgsForCall[i].requestParams, fake.generateManifestArgsForCall[i].previousManifest, fake.generateManifestArgsForCall[i].previousPlan
}

func (fake *FakeServiceAdapter) GenerateManifestReturns(result1 bosh.BoshManifest, result2 error) {
	fake.GenerateManifestStub = nil
	fake.generateManifestReturns = struct {
		result1 bosh.BoshManifest
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapter) CreateBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, arbitraryParams map[string]interface{}) (map[string]interface{}, error) {
	fake.createBindingMutex.Lock()
	fake.createBindingArgsForCall = append(fake.createBindingArgsForCall, struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
		arbitraryParams    map[string]interface{}
	}{bindingID, deploymentTopology, manifest, arbitraryParams})
	fake.createBindingMutex.Unlock()
	if fake.CreateBindingStub != nil {
		return fake.CreateBindingStub(bindingID, deploymentTopology, manifest, arbitraryParams)
	} else {
		return fake.createBindingReturns.result1, fake.createBindingReturns.result2
	}
}

func (fake *FakeServiceAdapter) CreateBindingCallCount() int {
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	return len(fake.createBindingArgsForCall)
}

func (fake *FakeServiceAdapter) CreateBindingArgsForCall(i int) (string, bosh.BoshVMs, bosh.BoshManifest, map[string]interface{}) {
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	return fake.createBindingArgsForCall[i].bindingID, fake.createBindingArgsForCall[i].deploymentTopology, fake.createBindingArgsForCall[i].manifest, fake.createBindingArgsForCall[i].arbitraryParams
}

func (fake *FakeServiceAdapter) CreateBindingReturns(result1 map[string]interface{}, result2 error) {
	fake.CreateBindingStub = nil
	fake.createBindingReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapter) DeleteBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest) error {
	fake.deleteBindingMutex.Lock()
	fake.deleteBindingArgsForCall = append(fake.deleteBindingArgsForCall, struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
	}{bindingID, deploymentTopology, manifest})
	fake.deleteBindingMutex.Unlock()
	if fake.DeleteBindingStub != nil {
		return fake.DeleteBindingStub(bindingID, deploymentTopology, manifest)
	} else {
		return fake.deleteBindingReturns.result1
	}
}

func (fake *FakeServiceAdapter) DeleteBindingCallCount() int {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return len(fake.deleteBindingArgsForCall)
}

func (fake *FakeServiceAdapter) DeleteBindingArgsForCall(i int) (string, bosh.BoshVMs, bosh.BoshManifest) {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return fake.deleteBindingArgsForCall[i].bindingID, fake.deleteBindingArgsForCall[i].deploymentTopology, fake.deleteBindingArgsForCall[i].manifest
}

func (fake *FakeServiceAdapter) DeleteBindingReturns(result1 error) {
	fake.DeleteBindingStub = nil
	fake.deleteBindingReturns = struct {
		result1 error
	}{result1}
}

var _ serviceadapter.ServiceAdapter = new(FakeServiceAdapter)

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	bosh "github.com/pivotal-cf/on-demand-services-sdk/bosh"
	serviceadapter "github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
)

type FakeDashboardUrlGenerator struct {
	DashboardUrlStub        func(string, serviceadapter.Plan, bosh.BoshManifest) (serviceadapter.DashboardUrl, error)
	dashboardUrlMutex       sync.RWMutex
	dashboardUrlArgsForCall []struct {
		arg1 string
		arg2 serviceadapter.Plan
		arg3 bosh.BoshManifest
	}
	dashboardUrlReturns struct {
		result1 serviceadapter.DashboardUrl
		result2 error
	}
	dashboardUrlReturnsOnCall map[int]struct {
		result1 serviceadapter.DashboardUrl
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDashboardUrlGenerator) DashboardUrl(arg1 string, arg2 serviceadapter.Plan, arg3 bosh.BoshManifest) (serviceadapter.DashboardUrl, error) {
	fake.dashboardUrlMutex.Lock()
	ret, specificReturn := fake.dashboardUrlReturnsOnCall[len(fake.dashboardUrlArgsForCall)]
	fake.dashboardUrlArgsForCall = append(fake.dashboardUrlArgsForCall, struct {
		arg1 string
		arg2 serviceadapter.Plan
		arg3 bosh.BoshManifest
	}{arg1, arg2, arg3})
	fake.recordInvocation("DashboardUrl", []interface{}{arg1, arg2, arg3})
	fake.dashboardUrlMutex.Unlock()
	if fake.DashboardUrlStub != nil {
		return fake.DashboardUrlStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.dashboardUrlReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDashboardUrlGenerator) DashboardUrlCallCount() int {
	fake.dashboardUrlMutex.RLock()
	defer fake.dashboardUrlMutex.RUnlock()
	return len(fake.dashboardUrlArgsForCall)
}

func (fake *FakeDashboardUrlGenerator) DashboardUrlCalls(stub func(string, serviceadapter.Plan, bosh.BoshManifest) (serviceadapter.DashboardUrl, error)) {
	fake.dashboardUrlMutex.Lock()
	defer fake.dashboardUrlMutex.Unlock()
	fake.DashboardUrlStub = stub
}

func (fake *FakeDashboardUrlGenerator) DashboardUrlArgsForCall(i int) (string, serviceadapter.Plan, bosh.BoshManifest) {
	fake.dashboardUrlMutex.RLock()
	defer fake.dashboardUrlMutex.RUnlock()
	argsForCall := fake.dashboardUrlArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDashboardUrlGenerator) DashboardUrlReturns(result1 serviceadapter.DashboardUrl, result2 error) {
	fake.dashboardUrlMutex.Lock()
	defer fake.dashboardUrlMutex.Unlock()
	fake.DashboardUrlStub = nil
	fake.dashboardUrlReturns = struct {
		result1 serviceadapter.DashboardUrl
		result2 error
	}{result1, result2}
}

func (fake *FakeDashboardUrlGenerator) DashboardUrlReturnsOnCall(i int, result1 serviceadapter.DashboardUrl, result2 error) {
	fake.dashboardUrlMutex.Lock()
	defer fake.dashboardUrlMutex.Unlock()
	fake.DashboardUrlStub = nil
	if fake.dashboardUrlReturnsOnCall == nil {
		fake.dashboardUrlReturnsOnCall = make(map[int]struct {
			result1 serviceadapter.DashboardUrl
			result2 error
		})
	}
	fake.dashboardUrlReturnsOnCall[i] = struct {
		result1 serviceadapter.DashboardUrl
		result2 error
	}{result1, result2}
}

func (fake *FakeDashboardUrlGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dashboardUrlMutex.RLock()
	defer fake.dashboardUrlMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDashboardUrlGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ serviceadapter.DashboardUrlGenerator = new(FakeDashboardUrlGenerator)
